#include "GamePlay.h"

#include<GameObjectManager.h>
#include<Input.h>

#include"TestObject.h"

void GamePlay::Initialize()
{
	// 初期化処理
	// 必ずコンストラクタではなくここに初期化処理を書く(設計上の都合で)
	fieldObjectManager = FieldObjectManager::GetInstance();

	// オブジェクトのメモリ確保
	pPlayer = std::make_shared<Player>();
	pBall = std::make_shared<Ball>();
	pBall->SetPosition(MelLib::Vector3(5, 0, -5));
	barrier = std::make_shared<NormalBarrier>();

	pPlayer.get()->SetNormalBarrier(barrier);
	pPlayer.get()->SetBall(pBall);

	pFollowEnemy = std::make_shared<FollowEnemy>();
	pEnemyBarrier = std::make_shared<EnemyBarrier>();
	pEnemyBarrier.get()->OpenBarrier();
	pBarrierEnemy = std::make_shared<BarrierEnemy>();
	pBarrierEnemy.get()->SetBarrier(pEnemyBarrier);

	// 管理クラスにオブジェクトを追加
	// ObjectManagerはshared_ptrのみ対応
	MelLib::GameObjectManager::GetInstance()->AddObject(pBall);
	//ボールは追加終わったら確保している必要がないので解放
	pBall = nullptr;

	MelLib::GameObjectManager::GetInstance()->AddObject(pPlayer);
	//バリアのテスト
	MelLib::GameObjectManager::GetInstance()->AddObject(barrier);

	//// テストオブジェクト追加
	//MelLib::GameObjectManager::GetInstance()->AddObject(std::make_shared<TestObject>(MelLib::Vector3(0, 0, 0)));

	// 敵のテスト
	MelLib::GameObjectManager::GetInstance()->AddObject(pFollowEnemy);
	MelLib::GameObjectManager::GetInstance()->AddObject(pBarrierEnemy);
	MelLib::GameObjectManager::GetInstance()->AddObject(pEnemyBarrier);


	fieldObjectManager->Initialize();
}

void GamePlay::Update()
{
	// マネージャーの更新
	// オブジェクトの更新処理、判定処理、削除処理が行われる
	MelLib::GameObjectManager::GetInstance()->Update();

	// 敵のテスト
	pFollowEnemy.get()->SetPlayerPos(pPlayer.get()->GetPosition());
	pFollowEnemy.get()->SetPlayerDir(pPlayer.get()->GetPosition());

	//ボール取得(とりあえず最初に見つかった1つ)
	for (const auto& v : MelLib::GameObjectManager::GetInstance()->GetRefGameObject()) {
		if (typeid(*v) == typeid(Ball)) {
			pBarrierEnemy.get()->SetBallDir(v->GetPosition());
			break;
		}
	}

	// Aキーで現在のシーンを終了して次のシーンへ
	// 今は次のシーンに今と同じシーンをセットしているため、位置がリセットされるだけ
	if (MelLib::Input::KeyTrigger(DIK_I))isEnd = true;
}

void GamePlay::Draw()
{
	// 描画
	MelLib::GameObjectManager::GetInstance()->Draw();
}

void GamePlay::Finalize()
{
	// 終了処理
	fieldObjectManager->Finalize();

	// 全削除
	MelLib::GameObjectManager::GetInstance()->AllEraseObject();
}

MelLib::Scene* GamePlay::GetNextScene()
{
	// 次のシーンのポインタを返す
	// 例 return new Title();
	return new GamePlay();
}
